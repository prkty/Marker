# 워크플로우의 이름을 지정합니다. GitHub의 'Actions' 탭에 이 이름이 표시됩니다.
name: Java CI with Gradle

# 워크플로우가 언제 실행될지를 정의하는 'Event' 설정입니다.
on:
  # main 또는 develop 브랜치에 push 이벤트가 발생했을 때 실행됩니다.
  push:
    branches: [ "main", "develop" ]
  # main 브랜치를 대상으로 pull request가 생성되거나 업데이트될 때 실행됩니다.
  pull_request:
    branches: [ "main" ]

# 워크플로우가 실행될 때 수행할 작업(Job)들을 정의합니다.
jobs:
  # 'build'라는 이름의 Job을 정의합니다.
  build:
    # 이 Job이 실행될 가상 환경을 지정합니다. 최신 버전의 Ubuntu를 사용합니다.
    runs-on: ubuntu-latest

    # Job 안에서 실행될 단계(Step)들을 순서대로 정의합니다.
    steps:
    # 1. 소스 코드 가져오기
    # uses: actions/checkout@v4 -> 미리 만들어진 'checkout' 액션을 사용하여 저장소의 코드를 가상 환경으로 가져옵니다.
    - name: Checkout source code
      uses: actions/checkout@v4

    # 2. JDK 17 설치하기
    # uses: actions/setup-java@v4 -> 'setup-java' 액션을 사용하여 지정된 버전의 Java를 설치합니다.
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. Gradle 실행 권한 부여하기
    # run: -> 쉘 명령어를 직접 실행합니다.
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # 4. Gradle로 빌드 및 테스트 실행하기
    # './gradlew build' 명령어는 컴파일, 모든 테스트 실행, JAR 파일 생성을 한 번에 수행합니다.
    - name: Build with Gradle
      run: ./gradlew build
